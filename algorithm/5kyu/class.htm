<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Document</title>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  <style>
    #getDataBtn {
      border: 0;
      background: rgb(35, 124, 197);
      border-radius: 5px;
      color: #fff;
      padding: 15px;
      cursor: pointer;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }

    .time {
      font-size: 18px;
      color: rgb(110, 110, 110);
    }
  </style>
</head>

<body>

  <button data-btn="getDataBtn" data-ip="65.35.12.135">화면 출력!1</button>
  <button data-btn="getDataBtn" data-ip="75.24.84.154">화면 출력!2</button>
  <button data-btn="getDataBtn" data-ip="85.14.84.135">화면 출력!3</button>

  <div class="view"></div>
  <script>
    // console.log(`hello world`);


    class Module {
      constructor() {}

      querySelector(attr) {
        return document.querySelector(attr)
      }
      querySelectorAll(attr) {
        return Array.from(document.querySelectorAll(attr))
      }
      doAxios(confg) {
        return axios(confg).then((data) => data).catch(err => err)
      }
      speak() {
        console.log(`${this.name} make a nose`);
      }

      elt(name, attributes) {
        var node = document.createElement(name);
        if (attributes && typeof attributes !== "string") {
          for (var attr in attributes) {
            if (attributes.hasOwnProperty(attr)) {
              node.setAttribute(attr, attributes[attr]);
            }
          }
        }
        for (var i = 2; i < arguments.length; i++) {
          var child = arguments[i];
          if (typeof child == "string") {
            child = document.createTextNode(child);
          }
          node.appendChild(child);
        }
        return node;
      }

    }

    class Btn extends Module {
      constructor() {
        super();
        this.name = "Btn"
        this.init();
      }

      async init() {
        this.setVar();
        await this.setData();
        await this.initView();
        this.setEvent();
      }

      setVar() {
        this.dataBtnArr = this.querySelectorAll('[data-btn="getDataBtn"]');
        this.view = this.querySelector('.view');
      }

      setEvent() {
        console.log(this,'setEvent');

        const viewBox = this.view;
        let getDate = this.getData;

        this.dataBtnArr.map(list => {
          list.addEventListener('click', function (e) {

            console.log(
              getDate(this.dataset.ip)
            );

          });
        })
      }

      async setData() {
        const axiosConf = {
          method: 'GET',
          url: 'https://worldtimeapi.org/api/ip/61.36.134.210'
        }
        this.initBtnData = await this.doAxios(axiosConf);

      }

      getData(data) {
        // console.log(data);
        // function getIpDate(ip) {
        //   const axiosConf = {
        //   method: 'GET',
        //   url: `https://worldtimeapi.org/api/ip/${ip}`
        // }
        // console.log(this,'this');
        //   return this.doAxios(axiosConf);
        // }
        // console.log(
        //   getIpDate(data)
        // );
        function  test(params) {
          
        }

        console.log(this,'getData');
        return test;
      }

      // ui 그려주기
      initView() {
        let date = this.initBtnData.data;
        let elm = this.elt("div", {class: "time"}, date.datetime);
        this.view.append(elm)
      }

    }

    var page = new Btn();






// QHostAddress

    // class Polygon{
    //   constructor(h,w){

    //   }

    //   hello(data){
    //     return data
    //   }
    // }
    // class Square extends Polygon{
    //   constructor(length){
    //     // length로 높이를 정의하기위해 부모 클래스의 생성자를 호출
    //     super();
    //     // NOTE: 파생 클래스에서 this를 사용하기 전에는 반드시 super()를 호출하여야합니다. 안그럴경우 참조에러 발생
    //     this.name = "Square";

    //     this.setFn()
    //   }
    //   setFn(){
    //     console.log(
    //       this.hello('HEllo world')
    //     );
    //   }

    //   get area(){
    //     return this.height * this.width;
    //   }
    //   set area(value){
    //     this.area = value;
    //   }
    // }
    // var test = new Square(4)
    // console.log(test.area);
    // console.log(test.name);
    // console.log(test);


    class Module {
      constructor() {}
      querySelectorAll(elm) {
        return Array.from(document.querySelectorAll(elm))
      }

      _filter(users, predi) {
        let new_list = [];
        this._each(users, function (val) {
          if (predi(val)) new_list.push(val);
        })
        return new_list;
      }

      _map(list, mapper) {
        let new_list = [];
        this._each(list, function (val) {
          new_list.push(mapper(val))
        });
        return new_list
      }

      _each(list, iter, str = 0, len = list.length) {
        for (let i = str; i < len; i++) iter(list[i]);
        return list
      };
    }

    class somePage extends Module {
      constructor() {
        super();
        this.init();
      }
      async init() {
        this.setVars();
      }

      setVars() {
        this.list = this.querySelectorAll('.list');
      }

      viewConsole() {
        this._each(this.list,(val) =>console.log(val));
        this._filter(this.list, (val)=> val.textContent =="MENU1")
      }
    }

    let page = new somePage();
    page.viewConsole();

  </script>
</body>

</html>